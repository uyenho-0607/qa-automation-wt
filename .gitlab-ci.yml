variables:
  TEST_SCOPE: ""
  S3_BUCKET: "allure.aquariux.dev"
  S3_REPORTS_URL: "http://allure.aquariux.dev/reports"

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_PIPELINE_SOURCE == 'web'
    - if: $CI_PIPELINE_SOURCE == 'schedule'
    
stages:
  # - install
  - test
  - report
  - upload
  - notify

run_tests:
  image: 149062447078.dkr.ecr.ap-southeast-1.amazonaws.com/cicd/qa-base:production
  stage: test
  allow_failure: true
  # dependencies:
  #   - install_dependencies
  script:
    # - pnpm test -- --ci  # Run Jest tests with the --ci flag for CI environment
    - ./run.sh $TEST_SCOPE
  artifacts:
    paths:
      - allure-results/
    when: always

generate_allure_report:
  image: 149062447078.dkr.ecr.ap-southeast-1.amazonaws.com/cicd/qa-base:production
  stage: report
  dependencies:
    - run_tests
  script:
    - |
      if [ ! -d allure-results ]; then
        echo "Error: allure-results directory does not exist!"
        exit 1
      fi
    - allure generate allure-results --clean
    - ls -lh allure-report
  artifacts:
    paths:
      - allure-report/  # Store the allure report for download

# Upload Allure Report to S3 bucket
upload_to_s3:
  image: 
    name: amazon/aws-cli:latest
    entrypoint: [""]
  stage: upload
  dependencies:
    - generate_allure_report  # Ensure the report is generated before uploading
  script:
    - ls -lh /root/.aws
    - cat /root/.aws/config
    - export FOLDER_NAME=$(TZ="Asia/Singapore" date +"%Y%m%d_%H%M%S")SGT
    - aws s3 cp allure-report/ s3://$S3_BUCKET/reports/$FOLDER_NAME --recursive
    - echo "Link to report - $S3_REPORTS_URL/$FOLDER_NAME"
    - echo "REPORT_LINK=$S3_REPORTS_URL/$FOLDER_NAME" > variables.env
  artifacts:
    reports:
      dotenv: variables.env  # Pass the dotenv file to the next job

send_slack_notification:
  image: 149062447078.dkr.ecr.ap-southeast-1.amazonaws.com/cicd/qa-base:production
  stage: notify
  dependencies:
    - upload_to_s3
  needs: 
    job: upload_to_s3
    artifacts: true
  script:
    - echo "Sending success slack notification $REPORT_LINK"
    - |
      # Check the status of the previous job (upload_to_s3) using the `CI_JOB_STATUS` or `$CI_JOB_NAME` 
      # if [ "$CI_JOB_STATUS" == "success" ]; then
      #   MESSAGE="Automated test pipeline for $TEST_SCOPE completed successfully. \nAllure Report Link: $REPORT_LINK"
      # else
      #   MESSAGE="Automated test pipeline failed during the upload_to_s3 stage. Please check the logs."
      # fi
      MESSAGE="Automated test pipeline completed successfully. \nAllure Report Link: $REPORT_LINK"


      # Send the Slack notification
      RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -X POST $SLACK_WEBHOOK_URL \
        -H "Content-Type: application/json" \
        -d "{\"text\": \"$MESSAGE\"}")

      if [ "$RESPONSE" -ne 200 ]; then
        echo "Webhook request failed with status $RESPONSE"
        exit 1
      fi
  when: always
